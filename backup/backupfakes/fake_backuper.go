// This file was generated by counterfeiter
package backupfakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/service-backup/backup"
)

type FakeBackuper struct {
	UploadStub        func(localPath, remotePath string) error
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		localPath  string
		remotePath string
	}
	uploadReturns struct {
		result1 error
	}
}

func (fake *FakeBackuper) Upload(localPath string, remotePath string) error {
	fake.uploadMutex.Lock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		localPath  string
		remotePath string
	}{localPath, remotePath})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(localPath, remotePath)
	} else {
		return fake.uploadReturns.result1
	}
}

func (fake *FakeBackuper) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeBackuper) UploadArgsForCall(i int) (string, string) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].localPath, fake.uploadArgsForCall[i].remotePath
}

func (fake *FakeBackuper) UploadReturns(result1 error) {
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 error
	}{result1}
}

var _ backup.Backuper = new(FakeBackuper)
