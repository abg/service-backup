// This file was generated by counterfeiter
package backupfakes

import (
	"os/exec"
	"sync"

	"github.com/pivotal-cf-experimental/service-backup/backup"
)

type FakeProviderFactory struct {
	ExecCommandStub        func(string, ...string) *exec.Cmd
	execCommandMutex       sync.RWMutex
	execCommandArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	execCommandReturns struct {
		result1 *exec.Cmd
	}
}

func (fake *FakeProviderFactory) ExecCommand(arg1 string, arg2 ...string) *exec.Cmd {
	fake.execCommandMutex.Lock()
	fake.execCommandArgsForCall = append(fake.execCommandArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	fake.execCommandMutex.Unlock()
	if fake.ExecCommandStub != nil {
		return fake.ExecCommandStub(arg1, arg2...)
	} else {
		return fake.execCommandReturns.result1
	}
}

func (fake *FakeProviderFactory) ExecCommandCallCount() int {
	fake.execCommandMutex.RLock()
	defer fake.execCommandMutex.RUnlock()
	return len(fake.execCommandArgsForCall)
}

func (fake *FakeProviderFactory) ExecCommandArgsForCall(i int) (string, []string) {
	fake.execCommandMutex.RLock()
	defer fake.execCommandMutex.RUnlock()
	return fake.execCommandArgsForCall[i].arg1, fake.execCommandArgsForCall[i].arg2
}

func (fake *FakeProviderFactory) ExecCommandReturns(result1 *exec.Cmd) {
	fake.ExecCommandStub = nil
	fake.execCommandReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

var _ backup.ProviderFactory = new(FakeProviderFactory)
