// This file was generated by counterfeiter
package backupfakes

import (
	"os/exec"
	"sync"

	"github.com/pivotal-cf/service-backup/backup"
)

type FakeProviderFactory struct {
	ExecCommandStub        func(string, ...string) *exec.Cmd
	execCommandMutex       sync.RWMutex
	execCommandArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	execCommandReturns struct {
		result1 *exec.Cmd
	}
	execCommandReturnsOnCall map[int]struct {
		result1 *exec.Cmd
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProviderFactory) ExecCommand(arg1 string, arg2 ...string) *exec.Cmd {
	fake.execCommandMutex.Lock()
	ret, specificReturn := fake.execCommandReturnsOnCall[len(fake.execCommandArgsForCall)]
	fake.execCommandArgsForCall = append(fake.execCommandArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	fake.recordInvocation("ExecCommand", []interface{}{arg1, arg2})
	fake.execCommandMutex.Unlock()
	if fake.ExecCommandStub != nil {
		return fake.ExecCommandStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.execCommandReturns.result1
}

func (fake *FakeProviderFactory) ExecCommandCallCount() int {
	fake.execCommandMutex.RLock()
	defer fake.execCommandMutex.RUnlock()
	return len(fake.execCommandArgsForCall)
}

func (fake *FakeProviderFactory) ExecCommandArgsForCall(i int) (string, []string) {
	fake.execCommandMutex.RLock()
	defer fake.execCommandMutex.RUnlock()
	return fake.execCommandArgsForCall[i].arg1, fake.execCommandArgsForCall[i].arg2
}

func (fake *FakeProviderFactory) ExecCommandReturns(result1 *exec.Cmd) {
	fake.ExecCommandStub = nil
	fake.execCommandReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeProviderFactory) ExecCommandReturnsOnCall(i int, result1 *exec.Cmd) {
	fake.ExecCommandStub = nil
	if fake.execCommandReturnsOnCall == nil {
		fake.execCommandReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
		})
	}
	fake.execCommandReturnsOnCall[i] = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeProviderFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.execCommandMutex.RLock()
	defer fake.execCommandMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeProviderFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backup.ProviderFactory = new(FakeProviderFactory)
